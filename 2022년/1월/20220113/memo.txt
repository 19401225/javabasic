# View 가상의 테이블 (바로가기 만들기 / 실제파일을 가리킨다)
  일반 사용자의 입장에서는 테이블과 동일하게 보인다. 그렇다면 왜 View를 사용할까?
  테이블의 필요한 내용만 골라서 보이도록 할 수 있다.
  View는 테이블과 아주 밀접하게 연관되어 있고 한 번 생성하면 테이블이라고 생각해도 될 정도로 
  테이블과 동일한 객체로 취급한다. 
  
  View는 실제 데이터를 가지고 있지 않고,
  View에 접근하는 순간 select가 실행되고 그 결과가 화면에 출력되는 방식이다. (마치 View에 데이터가 있는 것처럼)
  View는 단순 뷰와 복합 뷰로 나뉘는데, 
  단순 뷰는 하나의 테이블과 연관된 뷰를 의미하고, 
  복합 뷰는 두 개 이상의 테이블과 연관된 뷰를 말한다.


v_뷰이름  (뷰의 이름만 보고 어떤 테이블과 연계된 뷰인지 알 수 있도록 'v_접두어'를 사용하여 이름을 만든다.)
형식은 아래와 같다.

CREATE VIEW v_뷰이름
AS 
SELECT 구문;



실제 만들어보면,
CREATE VIEW v_member
AS 
  SELECT mem_id, mem_name, addr
  FROM market_db.member;


SELECT *
FROM v_member;


View에 조건식을 넣을 수도 있다. 결과는 테이블에서 추출하여 보는 것과 동일하다.
왜 굳이 뷰를 사용할까?
1. 보안 Security 
   인터넷 홈쇼핑에서 회원의 정보 확인을 위해 인력을 고용해서 진행할 때
   모든 정보가 담긴 테이블을 사용할 수 있도록 하면 상세정보가 유출되거나 수정이 될 수 있다.
   일부 정보에만 접근을 허용하여 불필요한 정보 노출을 방지할 수 있다.

2. 복잡한 SQL을 단순하게 만들 수 있다.
   뷰 작성 시 조건을 사용하게 되면, 해당 뷰를 통한 또 다른 SQL구문은 조금 더 단순해지는 효과를 얻을 수 있다.

실제 사용은 조금 복잡할 수 있다.
# 뷰의 실제 사용 

use market_db;

CREATE VIEW v_viewtest1
AS 
  select b.mem_id 'Member ID',
         m.mem_name 'Member Name',
         b.prod_name 'Product Name',
         concat(m.phone1, m.phone2) 'Office Phone'
  from buy b INNER JOIN member m
  ON b.mem_id = m.mem_id;


market_db 데이터베이스(스키마) 메뉴 안에 
Views 항목이 마치 테이블처럼 새로 생성된다.


SELECT distinct `Member ID`, `Member Name` 
FROM v_viewtest1;


# 뷰의 삭제(drop view)는 
drop view v_member;


# 뷰를 구조 확인(describe)하기는
describe v_viewtest1;


# 뷰의 소스를 보여주는
show create view v_viewtest1;

select *
from v_viewtest1;



# 뷰를 통해 데이터를 수정/삭제
  (열이름은 ``를 사용, 데이터값은 '' 작은 따옴표를 사용해야 한다.)


UPDATE v_viewtest1
SET `Member Name` = 'Black Pink'
WHERE `Member Name` = '블랙핑크';

select *
from v_viewtest1

---------------------


View (가상의 테이블) 실제 테이블과 아주 유사하지만 실제 데이터는 없는 거울 같은 개념이다.
뷰를 사용하는 이유는 보안과 사용자 편의 때문이다.
- 데이터 가공을 통해 마치 테이블처럼 내용을 보여줄 수 있다.
- 자주 쓰거나 복잡한 SQL문의 결과를 미리 만들어 놓고 필요 시 바로 활용할 수 있다.
- 여러 테이블을 조인하여 하나의 뷰로 생성할 수도 있다.
- 사용자 별로 접근 권한을 다르게 할 수 있다.

뷰의 종류
1. 심플 뷰 - 하나의 테이블에서 뷰를 생성한다.
2. 컴플렉스 뷰 - 여러 개의 테이블을 조인하여 뷰를 생성한다.
3. 인라인 뷰 - select문의 from절에 기술한 select문

Oracle SQL Developer 안에 이미 생성된 뷰가 있다.
뷰 >> 'emp_details_view'
  

select e.employee_id 사원번호,
       e.hire_date 입사일,
       v.department_name 부서명,
       v.job_title 직책
from employees e, emp_details_view v
WHERE e.employee_id = v.employee_id
order by e.employee_id;



select e.employee_id 사원번호,
       e.hire_date 입사일,
       v.department_name 부서명,
       v.job_title 직책
from employees e, emp_details_view v
WHERE e.employee_id = v.employee_id
AND v.department_name = 'Finance';



# 'e_d_view'라는 이름으로 뷰를 생성 (employees, dept 테이블을 사용해서)
  출력해야 될 열은 employee_id, first_name, last_name, email, dname, loc

create view e_d_view
AS 
select e.employee_id,
       e.first_name,
       e.last_name,
       e.email,
       d.dname,
       d.loc
from employees e, dept d;


# 뷰 삭제는 
drop view e_d_view;


select *
from e_d_view;


create view e_d_view
AS
select employee_id 사원번호,
       first_name || ' ' || last_name 이름,
       email 이메일,
       dname 부서명,
       loc 지역
from employees e, dept d;




# employees 테이블에서   (||은 Oracle에서만, concat은 모두 사용가능)
  select concat(concat(first_name,' '),last_name)
  select first_name || ' ' || last_name 


  first_name과 last_name을 붙여서 name, job_id, salary
+ 부서 번호별 월급의 합계을 출력 + 월급들 전체의 합계 제일 아래에 출력 (Union)


select first_name || ' ' || last_name "Name",
       department_id,
       salary
from employees

UNION 

select null,
       department_id,
       SUM(salary)
from employees
GROUP BY department_id

UNION 

select null,
       null AS department,
       SUM(salary)
from employees;



# 주문목록 order_info에서 출력할 열은 item_id, quantity, sales이고
  rank(), dense_rank, row_number() 모두 사용하여 내림차순(sales)으로 출력하시오.


select item_id 상품,
       quantity 수량,
       sales 판매가,
       rank() over(order by sales DESC) RANK,
       dense_rank() over(order by sales DESC) DENSE_RANK,
       row_number() over (order by sales DESC) ROW_NUMBER
from order_info;




select item_id 상품,
       product_name 제품명,
       price 판매가,
       RANK() over(order by price DESC) RANK,
       DENSE_RANK() over(order by price DESC) D_RANK,
       ROW_NUMBER() over(order by price DESC) R_num
from item;




## 시나리오 
도서관 데이터베이스를 구축하려고 한다.
요구사항을 분석해서 필요한 entity로 테이블을 만들고 속성(열)을 설정하시오.
(entity의 갯수는 3개, 각 entity마다 속성은 3개 이상 설정)

제출은 
엔터티 이름 : 
엔터티의 속성 : 3개
## 제약조건 5개 이상 적용 및 무결성 검증을 위해 조건에 어긋나는 자료 넣기
(제약조건을 목록으로 만들어서 캡쳐할 것)    'E01N2.jpg' 라는 이름으로 목록 캡처할 것
1. 제약조건이름, 적용한 테이블.필드, 적용코드
2. 제약조건이름, 적용한 테이블.필드, 적용코드
3. 제약조건이름, 적용한 테이블.필드, 적용코드
 (테이블에 예시 데이터를 2개만 )

# MySQL에서 ERD Diagram도 캡쳐해서 제출할 것 'E01N1.jpg'
# 무결성 검증 1개 (에러나는 상황을) 캡쳐하여 제출할 것 'E01N3.jpg'
# 전체 코드를 Export 'E01sql.sql'
  MySQL에서 왼쪽 가운데 쯤 `Schemas` 왼쪽에 `Administration` 클릭, 위에 목록에서 'Data Export' 클릭
  파일로 꺼낼 Schema 선택 후 오른쪽 테이블 선택, 아래에서 꺼낼 경로와 파일명 정하고
  상단에 현재 `Object Selection` 에서 `Export Progress` 클릭 후 Export 진행 

압축파일이름 '01test3강선구.zip' 
압축파일 아래에 모두를 담는 폴더명 'E01'
12:10분까지 제출




# 적용한 제약조건이름, 테이블명.열이름, 적용코드 (캡쳐 `E01N2.jpg`)
1. PRIMARY KEY, Book.book_id, 
    `book_id` VARCHAR(10) not null primary key,

2. FOREIGN KEY, Borrow.book_id,
    foreign key (book_id) references Book(book_id)

3. NOT NULL, Book.book_id, 
    `book_name` VARCHAR(30) not null,

4. UNIQUE, Book.category_id, 
    `category_id` VARCHAR(15) not null UNIQUE,

5. CHECK, Book.quantity,
    ALTER TABLE book
    ADD CONSTRAINT
    CHECK (quantity > 0); 



# 무결성 검증 (에러나는 상황 캡쳐 'E01N3.jpg')
INSERT INTO book VALUES ('B100','개미',소설,'베르베르',1991/01/01,ebook,1); 
INSERT INTO book VALUES ('B100','개미',소설,'베르베르',1991/01/01,ebook,0); 




# `library` Schema(database) 생성
CREATE SCHEMA `library` DEFAULT CHARACTER SET utf8 ;



# 3개의 테이블 생성 구상
Book DB(
    book_id 책번호 (B100~B254).   PK
    b_name 책이름,
    category_id 분류(분야별),
    writer 저자,
    date 발행일
    data_type 자료유형 ebook/pbook
    quantity 수량
)
Borrow (대여) DB(
    customer_id 고객번호    PK
    book_id,        FK
    b_name,
    category_id,
    data_type
    quantity,
    rent_date(대여일)
    return_date (반납일)
)
customer(고객) DB(
    customer_id 고객번호   PK FK
    rent_book 대여책,
    rent_quantity 대여수량,
    rent_date 대여일,
    return_date 반납일
    Subscription_date 등록일
    
)

# 실제 테이블 생성 

CREATE TABLE Book(
    `book_id` VARCHAR(10) not null primary key ,
    `book_name` VARCHAR(30) not null,
    `category_id` VARCHAR(15) not null UNIQUE,
    `writer` varchar(20) not null,
    `date` date,
    `data_type` char(8) not null,
    `quantity` int
);
ALTER TABLE book
ADD CONSTRAINT
CHECK (quantity > 0); 


CREATE TABLE Borrow(
	`customer_id` VARCHAR(15) not null primary key,
    `book_id` VARCHAR(10) not null, 
    `book_name` VARCHAR(30) not null,
    `category_id` VARCHAR(15) not null UNIQUE,
    `data_type` char(8) not null,
	`quantity` int,
    `rent_date` date,
    `return_date` date,
    foreign key (book_id) references Book(book_id)
);


CREATE TABLE customer(
    customer_id varchar(15) not null primary key,
    Subscription_date date not null,
    rent_book varchar(30) not null,
    rent_quantity int not null,
    rent_date date not null,
    return_date date not null
);


## 시험 (왼쪽 접속 메뉴가 다 보이도록)
## 뷰생성 위해 작성한 사진 (윈도우 + Shift + S)
## select * 하여 나온 결과 사진
## 뷰 생성 위해 작성한 코드를 복사하여 메모장에 붙여넣고, 파일로 전송

## 학원 데이터베이스를 구축하려고 한다.
요구사항을 분석해서 필요한 entity로 테이블을 만들고 속성(열)을 설정하시오.
(entity의 갯수는 3개, 각 entity마다 속성은 3개 이상 설정)

 제출해야될 내용 (각 내용마다 캡쳐)
    1. ERD Diagram
    2. 제약조건 적용 목록 (제약조건이름/적용한테이블.필드/적용코드)
    3. 무결성 검증 코드 (제약조건에 어긋나 에러가 나는 상황)
    4. 구축한 Schema, Export하기 




create schema `dbever` default character set utf8;

create table `student` (
	`id` varchar(10) not null PRIMARY KEY,
    `name` varchar(10) not null,
    `tel` int
    );

create table `subject` (
	`id` varchar(10) not null PRIMARY KEY,
    `title` varchar(10) not null,
    `location` int
    );

create table `class` (
	`class_id` varchar(10) not null PRIMARY KEY,
    `student_id` varchar(10) not null,
    `subject_id` varchar(10) not null,
    foreign key (student_id) references student(id),
    foreign key (subject_id) references subject(id)
    
    );

insert into student values ('park','park',011);
insert into student values ('kim','kim',012);

insert into subject values ('s100','java',201);
insert into subject values ('s200','python',202);

insert into class values ('c100','park','s100');
insert into class values ('c200','kim','s200');

무결성 검증 자료

insert into student values ('park',100,011);
insert into student values ('kim','kim','kim');

insert into subject values (199,'java',201);
insert into subject values ('s200',100,202);

insert into class values ('c100',12,100);
insert into class values ('c200',100,'s200');




select department_id 부서번호,
       salary 급여,
       RANK() Over(order by salary DESC) AS RANK,
       DENSE_RANK() Over(order by salary DESC) AS D_RANK,
       ROW_NUMBER() Over(order by salary DESC) AS R_NUM
from employees
where department_id = 50;




실제 만들어보면,
CREATE VIEW v_member
AS 
  SELECT mem_id, mem_name, addr
  FROM market_db.member;

CREATE VIEW v_EMV_DEPT_VIEW
AS
select e.employee_id 사번,
       e.first_name || ' ' || e.last_name 이름,
       e.job_id 직책,
       d.ename 부서명,
       d.loc 부서위치
from employees e JOIN dept d
ON e.department_id = d.deptno;




18번) 

select department_id 부서번호,
       salary 월급
from employees

UNION

select null,
       SUM(salary)
from employees 
group by department_id

UNION

select null,
       SUM(salary)
from employees;





# `Mall` Schema 생성
create schema `Mall` default character set utf8;

# 테이블 생성 (3개, 속성은 3개이상)

create table product (
    product_id varchar(10) not null PRIMARY KEY,
    product_name varchar(10) not null Unique,
    product_desc varchar(20),
    product_size varchar(10) not null,
    price int
);

create table order_info (
    customer_id varchar(10) not null PRIMARY KEY,
    product_id varchar(10) not null,
    product_name varchar(10) not null Unique,
    size varchar(6) not null,
    quantity int default 1,
    order_date date not null,
    foreign key (product_id) references product(product_id)
);

create table customer (
    customer_id varchar(10) not null PRIMARY KEY,
    customer_pass varchar(20) not null Unique,
    customer_name varchar(10) not null,
    sex_code char(2) not null check (sex_code IN ('M','F')),
    age int,
    contact int,
    foreign key (customer_id) references order_info(customer_id)
);





insert into product values ('M0001','socks','twins','M',3000);
insert into product values ('M0002','socks2','twins','L',3000);

insert into order_info values ('ksg9100','M0001','socks','M',1,'2022/01/13');
insert into order_info values ('aaa9000','M0002','socks2','L',1,'2022/01/13');

insert into customer values ('ksg9100','1234','John','M',13,01011112222);
insert into customer values ('aaa9000','4321','Michael','M',110,01022222222);


(4) 적용한 제약 조건들을 목록으로 만들어 갈무리하여 제출하시오. (제출 파일 : `Q19N4.jpg`)
 예시) 제약조건이름,  적용한 테이블명/필드명,  적용한 코드 복사


 1. PRIMARY KEY,  product.product_id,
     product_id varchar(10) not null PRIMARY KEY,

 2. FOREIGN KEY,  customer.customer_id,
     foreign key (customer_id) references order_info(customer_id)
 
 3. UNIQUE,  customer.customer_pass,
     customer_pass varchar(20) not null Unique,

 4. CHECK,  customer.sex_code,
     sex_code char(2) not null check (sex_code IN ('M','F')),

 5. DEFAULT, order_info.quantity,
     quantity int default 1,

 6. NULL, customer.customer_name,
     customer_name varchar(10) not null,



 

CREATE TABLE Book(
    `book_id` VARCHAR(10) not null primary key ,
    `book_name` VARCHAR(30) not null,
    `category_id` VARCHAR(15) not null UNIQUE,
    `writer` varchar(20) not null,
    `date` date,
    `data_type` char(8) not null,
    `quantity` int
);
ALTER TABLE book
ADD CONSTRAINT
CHECK (quantity > 0); 


CREATE TABLE Borrow(
	`customer_id` VARCHAR(15) not null primary key,
    `book_id` VARCHAR(10) not null, 
    `book_name` VARCHAR(30) not null,
    `category_id` VARCHAR(15) not null UNIQUE,
    `data_type` char(8) not null,
	`quantity` int,
    `rent_date` date,
    `return_date` date,
    foreign key (book_id) references Book(book_id)
);


CREATE TABLE customer(
    customer_id varchar(15) not null primary key,
    Subscription_date date not null,
    rent_book varchar(30) not null,
    rent_quantity int not null,
    rent_date date not null,
    return_date date not null

);


customer 고객(학생)목록 (
    registration_date 등록일,
    c_id 고객번호, PK
    c_name 이름,
    contact 연락처,
    email 이메일,
    subject 과목,  
    tution_yn 수업료납부여부 char(5) check (tution_yn IN ('Y','N')),
    Next_reg_date 다음등록일

class 수업 (
    subject 과목,  PK FK
    teacher 선생님,
    class_date 수업날짜
    class_time 수업시간,
    classroom 수업장소 
      
)

Instructor 강사 (
    registration_date 등록일,
    name 이름,  PK
    age 나이,
    subject 과목 FK,
    classroom 수업장소,
    Career 경력
)

Schedule 일정 (
    branch 학원지점 PK Unique,
    subject 과목 FK,
    class_date 수업날짜,
    class_time 수업시간,
    classroom 수업장소,
    teacher 선생님

)

subject 과목 (
    WebApp_Development 웹앱개발,
    BigData 빅데이터,
    Blockchain 블록체인,
    AI 인공지능,
    Web_design 웹디자인,
    game_programming 게임프로그래밍,
    Teacher_inCharge 담당선생님

------------------- 오후 시험 -----------------------



















View에 조건식을 넣을 수도 있다. 결과는 테이블에서 추출하여 보는 것과 동일하다.
왜 굳이 뷰를 사용할까?
1. 보안 Security 
   인터넷 홈쇼핑에서 회원의 정보 확인을 위해 인력을 고용해서 진행할 때
   모든 정보가 담긴 테이블을 사용할 수 있도록 하면 상세정보가 유출되거나 수정이 될 수 있다.
   일부 정보에만 접근을 허용하여 불필요한 정보 노출을 방지할 수 있다.

2. 복잡한 SQL을 단순하게 만들 수 있다.
   뷰 작성 시 조건을 사용하게 되면, 해당 뷰를 통한 또 다른 SQL구문은 조금 더 단순해지는 효과를 얻을 수 있다.




v_뷰이름  (뷰의 이름만 보고 어떤 테이블과 연계된 뷰인지 알 수 있도록 'v_접두어'를 사용하여 이름을 만든다.)
형식은 아래와 같다.

CREATE VIEW v_뷰이름
AS 
SELECT 구문;




실제 만들어보면,
CREATE VIEW v_member
AS 
  SELECT mem_id, mem_name, addr
  FROM market_db.member;



실제 사용해보면,
SELECT *
FROM v_member;