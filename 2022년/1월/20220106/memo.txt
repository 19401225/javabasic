
오라클 홈페이지에서 연습해보자.
https://livesql.oracle.com/apex/f?p=590:1:12399080574071::NO:::




1)
CREATE TABLE address (
        zip_code VARCHAR2(6),
        address_detail VARCHAR2(20));
 // 테이블 생성

기본키 설정)
ALTER TABLE address ADD CONSTRAINT pk_zip_code PRIMARY KEY (zip_code);




ALTER 테이블 수정
    이미 생성된 테이블에 열을 추가/삭제/변경하거나 테이블의 구조를 바꿀 수 있다.

PRIMARY KEY란?
 제약조건의 하나로 기본키라고 부르며 레코드의 대표값으로 레코드를 구분하는 유일값이 들어가야 한다.
 PRIMARY KEY 제약조건이 설정된 컬럼은 NULL을 허용하지 않게 되고 UNIQUE 제약조건이 자동으로 설정된다.
 1) 테이블 생성시 PRIMARY KEY가 설정된 컬럼을 포함하는 방법
    CREATE TABLE 테이블명 (
        컬럼명 데이터형식 PRIMARY KEY 제약조건
    )
 2) 컬럼에 PRIMARY KEY 추가 방법
    ALTER TABLE 테이블명 ADD CONSTRAINT [PRIMARY KEY명] PRIMARY KEY 컬럼명

 3) 컬럼에 PRIMARY KEY 삭제방법
    ALTER TABLE 테이블명 DROP CONSTRAINT [PRIMARY KEY명]
 4) 테이블 제약조건 확인방법
    SP_HELPCONSTRAINT 테이블명


FOREIGN KEY 
 FOREIGN KEY








2)
CREATE TABLE customer (
            customer_id     VARCHAR2(10),
            customer_name   VARCHAR2(20),
            phone_number    VARCHAR2(15),
            email           VARCHAR2(20),
            first_reg_date  DATE,
            sex_code        VARCHAR2(2),
            birth           VARCHAR2(8),
            job             VARCHAR2(20),
            zip_code        VARCHAR2(6));
기본키 설정)
ALTER TABLE customer ADD CONSTRAINT pk_customer PRIMARY KEY (customer_id);

다른 테이블과 연결)
ALTER TABLE customer ADD CONSTRAINT fk_customer_zip_code FOREIGN KEY (zip_code) REFERENCES address(zip_code);
                              


3) 
CREATE TABLE item (
        item_id         VARCHAR2(10),
        product_name    VARCHAR2(30),
        product_desc    VARCHAR2(50),
        category_id     VARCHAR2(10),
        price           NUMBER(10,0));


ALTER TABLE item ADD CONSTRAINT pk_item PRIMARY KEY (item_id);
  // PRIMARY KEY 는 반장을 설정한다.
  // ALTER TABLE item은 item 테이블을 수정한다는 의미이다
  // ADD CONSTRAINT 함수, pk_item은 primary key를 의미한다.





4)
CREATE TABLE reservation (
    reserv_no       VARCHAR2(30),
    reserv_date     VARCHAR2(8),
    reserv_time     VARCHAR2(4),
    customer_id     VARCHAR2(10) CONSTRAINT nn_reservation_customer_id NOT NULL enable,
    branch          VARCHAR2(20),
    visitor_cnt     NUMBER(3,0),
    cancel          VARCHAR2(1));

기본키설정)
ALTER TABLE reservation ADD CONSTRAINT pk_reservation PRIMARY KEY (reserv_no);

관계 연결)
ALTER TABLE reservation ADD CONSTRAINT fk_reservation_customer_id FOREIGN KEY (customer_id) REFERENCES customer (customer_id);
                                                              


5)
CREATE TABLE order_info (
    order_no    VARCHAR2(30),
    item_id     VARCHAR2(10),
    reserv_no   VARCHAR2(30),
    quantity    NUMBER(3,0),
    sales       NUMBER(10,0));
    
기본키설정)
ALTER TABLE order_info ADD CONSTRAINT pk_order_info PRIMARY KEY (order_no, item_id);
                                                        // 이렇게 키가 두 개일 수 있다.

다른 테이블과 연결)
ALTER TABLE order_info ADD CONSTRAINT fk_order_info_item_id FOREIGN KEY (item_id) REFERENCES item (item_id);

ALTER TABLE order_info ADD CONSTRAINT fk_order_info_reserv_no FOREIGN KEY (reserv_no) REFERENCES reservation (reserv_no);






1~5번까지 내용들을 Oracle SQL Developer에서 실행하면 
해당 테이블이 생성되고 기본키설정 및 다른 테이블과 연결되게 된다.
sqlpractice 폴더에 있는 실제 데이터를 넣어보면,
@c:\sqlpractice\1.address.sql 
@c:\sqlpractice\2.customer.sql 
@c:\sqlpractice\3.item.sql 
@c:\sqlpractice\4.reservation.sql 
@c:\sqlpractice\5.order_info.sql     이 5개를 각각 실행하면 커밋되는 것을 확인할 수 있다.
   
@c:\sqlpractice\create_table 을 실행하면 

SELECT *
FROM order_info;   실행하여 데이터가 업로드된 것을 확인한다.





이어서 웹(오라클 홈페이지)에서 진행해보면,
https://livesql.oracle.com/apex/f?p=590:17:12399080574071::NO::: 
오라클 홈페이지에서도 메뉴 > My Scripts > Upload Script 를 통해
sqlpractice 안에 있는 실제 데이터 자료를 업로드한다. (Run Script를 해야 업로드가 완료된다.)

SELECT *
FROM item;  입력해서 업로드가 완료된 것을 확인해본다.



address 주소정보 25개
customer 고객정보 183명
item 상품정보 10개
reservation 주문예약/취소 396개
order_info 주문정보 393개

DataSet이 이렇게 준비되어 있다.

고민....
결구에는 상품을 많이 판매해야겠지
서울 지역의 패밀리 레스토랑 (여러 지점들이 있겠지)
주로 오프라인 위주 예약/판매를 하니까..
어떻게 매출을 올릴 수 있을까?
먼저 분석을 해보자.

서울 지역에 여러 오프라인으로 음식점을 운영중
가족 단위가 주요 고객
온라인 예약 시스템, 온라인 전용 메뉴를 기획했고
전용 상품을 서울 모든 지점에서 2017년 6월 ~ 12월까지 서비스 진행하였음

Oracle SQL Developer 에서
파일 > Data Modeler > 임포트 > 데이터 딕셔너리 > Study HR > HR선택 후 다음 > 5개항목 체크 후 완료
이미지로 표현이 된 것을 확인할 수 있다.


우선 테이블에 담긴 자료들에 대해 충분히 이해하고 있어야겠지
- 온라인 예약 매출 시스템 DB에는 
  고객정보(customer), 주소정보(address), 예약정보(reservation), 주문정보(order_info), 상품정보(item)으로 
  총 5개 항목으로 구성되어 있다.
- 주소는 고객을 여러 건 갖는다. 주소가 없어도 고객은 존재할 수 있다.(오프라인으로도 하기 때문에)
- 고객은 예약을 여러 건 갖는다. 고객 없이는 예약은 존재할 수 없다. 
  .equals(한 명의 고객은 예약을 여러 건 가질 수 있고, 예약할 때는 customer_id가 필수이다.)
- 예약은 주문을 여러 건 갖는다. 예약 정보가 없더라도 주문 정보는 존재할 수 있다.
  reserv_no는 당일 예약에 대해 순차적으로 생성된다.
- 상품 주문은 여러 건 갖는다. 상품이 없으면(재고x) 주문은 존재할 수 없다.
  = 주문은 item_id를 필수로 갖는다. 주문 정보는 주문이 완료된 경우에만 생성된다고 가정한다.

고객정보(customer)

예약정보(reservation)

주문정보(order_info)
  주문1   -  상품 
  주문2   -  상품
 order_no   item_id




####
매출 분석
1. 전체 상품의 '주문 완료 건' (COUNT) 
   - 총 매출    SUM  
   - 평균 매출  AVG
   - 최고 매출  MAX
   - 최저 매출  MIN

예약정보 reserv_no 이
reservation, order_info 두 테이블에 모두 있으면 주문 완료가 된 건으로 볼 수 있다.
예약 후 주문까지 들어갔다면 완료가 된 것이고
예약만 되어 있다면 아직 주문은 안된 상태로 볼 수 있다.


SELECT COUNT(*) AS 주문완료건,
       SUM(B.sales) AS 총매출,
       ROUND(AVG(B.sales)) AS 평균매출,
       MAX(B.sales) AS 최고매출,
       MIN(B.sales) AS 최저매출
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no;

전체 주문 건은 391건이고 
총 매출은 24,957,000원,
평균매출은 63,829원,
최고매출은 552,000원,    (????? 왜 이렇게 차이나지)
최저매출은 6,000원이다.  (????? 정말 한가한 평일이었나?)
평균매출이 최고/최저 매출과 많이 차이가 나는 것을 볼 수 있다.
다양한 패턴의 고객이 분포할 것으로 보인다.



가장 먼저 알고 싶은 것은
'온라인 전용 상품이 얼마나 팔렸느냐'이다. 
임원진을 설득하려면 명확한 근거가 필요하다.
전체 판매량 중에 온라인 전용 상품의 판매량이 어느정도인지 파악해보자.

전체상품의 총 판매량, 
          총 매출액,
          전용상품의 판매량,
          전용상품의 매출액을 알아보자.

order_info 테이블안에 item_id가 M0001 인 제품이 전용상품이다.
if문인 DECODE를 사용한다.

SELECT COUNT(*) 전체주문건,
       SUM(B.sales) 총매출,
       SUM(DECODE(B.item_id,'M0001',1,0)) 전용상품판매량,
       SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출액
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no;

전체주문건 391
총매출 24,957,000원
전용상품매출량 59
전용상품매출약 580,800원
 전체판매량이 391건인데 그 중 59건이 전용상품 판매건이다.
 판매량에서는 전체에서 15%정도를 차지하고 있고
 매출액에서는 20%정도를 차지하고 있다.
 상품 개수 대비 매출의 상대값으로 보면 매우 높은 수치이다.


이번에는 각 상품별(item)로 매출을 비교해보자.
각 상품별 전체 매출액을 내림차순으로 출력해보자.

SELECT C.item_id 상품아이디,
       C.product_name 상품이름,
       SUM(B.sales) 상품매출
FROM reservation A, order_info B, item C
WHERE A.reserv_no = B.reserv_no
AND B.item_id = C.item_id                 
GROUP BY C.item_id, C.product_name            // 그림을 보면 B와 C는 item_id로 묶여 있다.
ORDER BY SUM(B.sales) DESC;
 
 전용 상품 M0001이 두 번째로 많이 팔렸다는 것을 확인할 수 있다.
 온라인으로만 주문 가능한 상품이 두 번째로 많이 팔렸다는 것은 
 온라인 상에도 많은 고객이 존재한다고 볼 수 있다.



월별 제품별 매출을 파악해보자.
reservation테이블에 reserv_date 가 날짜임을 확인할 수 있다. (VARCHAR(8)) 문자를 자를 수 있겠지 (20170829)


SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
      SUM(DECODE(B.item_id,'M0001',B.sales,0)) M0001,
      SUM(DECODE(B.item_id,'M0002',B.sales,0)) M0002,
      SUM(DECODE(B.item_id,'M0003',B.sales,0)) M0003,
      SUM(DECODE(B.item_id,'M0004',B.sales,0)) M0004,
      SUM(DECODE(B.item_id,'M0005',B.sales,0)) M0005,
      SUM(DECODE(B.item_id,'M0006',B.sales,0)) M0006,
      SUM(DECODE(B.item_id,'M0007',B.sales,0)) M0007,
      SUM(DECODE(B.item_id,'M0008',B.sales,0)) M0008,
      SUM(DECODE(B.item_id,'M0009',B.sales,0)) M0009,
      SUM(DECODE(B.item_id,'M0010',B.sales,0)) M0010,
      SUM(B.sales) 월매출합계
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);

11월과 12월이 유난히 매출이 높은 것을 확인할 수 있다.
연말이면 가족, 연인들이 레스토랑에서 식사(주로 스테이크)를 하거나,
전용상품(콤보)에도 스테이크가 있기 때문에 온라인 주문이 증가하는 것을 볼 수 있다.




매출월, 총매출, 전용상품매출을 출력하시오.

SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
      SUM(B.sales) 월매출합계,
      SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);


매출월, 총매출, 전용상품매출, 매출기여율을 출력하시오.

SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
      SUM(B.sales) 월매출합계,
      SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출, 
      SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100 매출기여율
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);


SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
      SUM(B.sales) 월매출합계,
      SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출, 
      ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,2) 매출기여율
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);

전용상품 판매 시작부터(2017년06월) 높은 매출 기여도(23.49%)를 보이다가
9월부터 11월까지 약간 줄어드는 양상을 보이다가 12월에는 월등히 높아져
무려 29.61%로 전체 매출이 2배로 증가하는 동안 전용상품은 3~4배 사이로 증가한 것을 확인할 수 ㅣㅇㅆ다.
전용상품은 연말 시즌과 관련이 밀접한 것으로 보인다.


매출월, 총매출, 전용상품매출, 매출기여율에서
총 예약건, 예약 완료/취소건을 추가해보자.

SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
      SUM(B.sales) 월매출합계,
      SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출, 
      ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,2) 매출기여율,
      COUNT(A.reserv_no) 총예약건,
      SUM(DECODE(A.cancel,'N',1,0)) 예약완료건,
      SUM(DECODE(A.cancel,'Y',1,0)) 예약취소건
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);

심각한 오류가 있다. reservation테이블은 주문 정보를 갖지 않을 수 있다.
즉, reservation 테이블에 reserv_no가 있다고 해도 order_info 테이블에는 
reserv_no가 없을 수 있다.
온라인 예약이 취소되면 방문하지 않고 주문 정보도 없게 된다.
그러면 예약 취소건까지 모두 출력하려면 외부 조인 outer join을 사용해야 한다.
데이터가 부족한 쪽은 order_info 테이블에 외부조인(+)을 넣어주면 조건이 맞지 않는 '취소건'도 
조인되어 처리가 된다.

SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
      SUM(B.sales) 월매출합계,
      SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출, 
      ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,2) 매출기여율,
      COUNT(A.reserv_no) 총예약건,
      SUM(DECODE(A.cancel,'N',1,0)) 예약완료건,
      SUM(DECODE(A.cancel,'Y',1,0)) 예약취소건
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no(+)
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);


이어서 총 매출 대비 전용상품외매출
총 예약건 대비 예약 취소율을 추가해보자.(소숫점은 2자리까지만 출력)

SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
      SUM(B.sales) 월매출합계,
      ROUND(SUM(DECODE(B.item_id,'M0001',0,B.sales))/SUM(B.sales)*100,2) 전용상품외매출,
      SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출, 
      ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,2) 전용상품판매율,
      COUNT(A.reserv_no) 총예약건,
      SUM(DECODE(A.cancel,'N',1,0)) 예약완료건,
      SUM(DECODE(A.cancel,'Y',1,0)) 예약취소건,
      ROUND(SUM(DECODE(A.cancel,'Y',1,0))/COUNT(A.reserv_no)*100,2) 예약취소율
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no(+)
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);



- 선생님 풀이 - 

SELECT  SUBSTR(A.reserv_date, 1, 6) 매출월,
        SUM(B.sales) 총매출,
        SUM(B.sales) - SUM(DECODE(B.item_id, 'M0001',B.sales,0)) 전용상품외매출,
        SUM(DECODE(B.item_id, 'M0001',B.sales,0)) 전용상품매출,    
        round(SUM(DECODE(B.item_id, 'M0001',B.sales,0))/SUM(B.sales)*100 ,1) || '%' 전용상품판매율,
        COUNT(A.reserv_no) 총예약건,
        SUM(DECODE(A.cancel,'N', 1, 0)) 예약완료건,
        SUM(DECODE(A.cancel,'Y', 1, 0)) 예약최소건,
        ROUND(SUM(DECODE(A.cancel,'Y', 1, 0)) / COUNT(A.reserv_no)* 100,1)||'%' 예약취소율                                       
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no(+)
GROUP BY SUBSTR(A.reserv_date, 1, 6)
ORDER BY SUBSTR(A.reserv_date, 1, 6);





SELECT SUBSTR(reserv_date,1,6) 날짜,
       A.product_name 상품명,
       SUM(DECODE(A.WEEK,'2',A.sales,0)) 월요일,     
       SUM(DECODE(A.WEEK,'3',A.sales,0)) 화요일,     
       SUM(DECODE(A.WEEK,'4',A.sales,0)) 수요일,   
       SUM(DECODE(A.WEEK,'5',A.sales,0)) 목요일,     
       SUM(DECODE(A.WEEK,'6',A.sales,0)) 금요일,    
       SUM(DECODE(A.WEEK,'7',A.sales,0)) 토요일,
       SUM(DECODE(A.WEEK,'1',A.sales,0)) 일요일
FROM (
        SELECT A.reserv_date, 
               C.product_name,
               TO_CHAR(TO_DATE(A.reserv_date,'YYYYMMDD'),'d') WEEK,   // TO_DATE함수에 담아 실제 날짜로 
               B.sales
        FROM reservation A, order_info B, item C
        WHERE A.reserv_no = B.reserv_no
        AND   B.item_id = C.item_id
        AND   B.item_id = 'M0001') A    // 모두 A에 담았다.
GROUP BY SUBSTR(reserv_date,1,6), A.product_name
ORDER BY SUBSTR(reserv_date,1,6);




월별 전용 상품 매출 1~3위까지 지점이 어디인지 확인해보자.
마지막 지점순위 <= 숫자를 1로 바꾸면 매출1위만 출력된다.

SELECT *
FROM (
        SELECT SUBSTR(A.reserv_date,1,6) 매출월,
               A.branch 지점,
               SUM(B.sales) 전용상품매출,
               DENSE_RANK() OVER(PARTITION BY SUBSTR(A.reserv_date,1,6)
               ORDER BY SUM(B.sales) DESC) 지점순위
               FROM reservation A, order_info B
               WHERE A.reserv_no = B.reserv_no
               AND A.cancel = 'N'
               AND B.item_id = 'M0001'
               GROUP BY SUBSTR(A.reserv_date,1,6), A.branch
               ORDER BY SUBSTR(A.reserv_date,1,6)) A 
WHERE A.지점순위 <= 3;
    


DENSE_RANK() OVER(PARTITION BY SUBSTR(A.reserv_date,1,6)
순위를 매긴다.  ,파티션으로 묶어서      ,월별로 잘라낸 것을    





성별을 구분해보자.

SELECT COUNT(customer_id) 고객수,
       SUM(DECODE(sex_code,'M',1,0)) 남자,
       SUM(DECODE(sex_code,'F',1,0)) 여자,
       SUM(DECODE(sex_code,'',1,0))  기타
FROM customer;





























웹개발환경은 Python
로컬환경은 anaconda(가장 큰 특징은 가상환경에서)

데이터 분석을 위해 로컬에는 anaconda를 설치한다.
anaconda는 가상환경에 python을 설치해준다.

로컬에서 vsCode에서 python과
anaconda를 통한 python은 환경이 다르다.



웹 개발 환경은 colab으로 통한다.
https://colab.research.google.com/?utm_source=scs-index
colab이라는 사이트이다.
 
https://colab.research.google.com/drive/1ShRK4B-fTuk40idXF_e5_SKfpt48ldjh  파이썬 환경
https://colab.research.google.com/drive/1gqgjy25EGHRwJgdCsPxmOMBaGVzE1O7u  R 환경

보통 R은 https://www.rstudio.com/ 이 사이트에서 사용한다.

vsCode를 안쓰면 파이썬은 파이참으로, R은 Rstudio로 가는데
vsCode에서는 둘 다 사용할 수 있다.


anaconda는 3.9파이썬이 설치된다.(현재 3.10.1 또는 3.11 버전이 나와 있는 상태)
로컬 환경에서는 3.8.12를 설치해준다.(관련 라이브러리를 사용해야 하기 때문이다.)



R과 파이썬은 anaconda가 필수다. 다른 선택지가 없어
anaconda를 통해 R을 사용할 환경을 설치해준다.














