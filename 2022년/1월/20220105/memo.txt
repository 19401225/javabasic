
2000년 미국에, 클레이재단에서 7문제를 출제했다.
각 문제마다 100만불(10억)의 현상금이 걸렸다.
https://www.claymath.org/millennium-problems

유튜브에 '페렐만 푸앵카레', 'n vs np problem' 검색하여 조사하기





자주쓰이는 함수들을 살펴보자.
 NOT NULL   특정 열의 행에 대한 데이터 값이 없다면 데이터 값은 NULL이 된다.
            테이블을 만들 때 NULL값을 가지지 않도록 설정할 수도 있다.
 null의 특징
 1) 함수 적용이 불가능한 값이다.
 2) 0도 아니고, 공백 ' '도 아니다
 3) null값을 포함하여 계산한 결과는 null이다.

SELECT salary, commission_pct
FROM employees
ORDER BY commission_pct;     // commission_pct는 수수료이다.
  // commission_pct에 대해 오름차순으로 정렬하여 출력한다.



SELECT employee_id,
       first_name,
       last_name,
       job_id,
       salary,
       commission_pct,
       salary * commission_pct       // 35행까지 잘 나오다가 commission_pct값이 null인 36행부터는 
FROM employees                       // salary * commission_pct 값이 모두 null로 출력되고 있다.
ORDER BY commission_pct;             // 그러면 null값을 어떻게 처리할 수 있을까?



NVL(열이름, 치환값) 

SELECT salary * NVL(commission_pct,0)   // NVL함수에 commission_pct값을 넣었다.
FROM employees                          // null일때 그 값을 0으로 바꾼다는 의미이다.
ORDER BY commission_pct;                // NVL함수는 null값을 어떤 특정한 값으로 변환하여 계산한다.
  // null값은 산술 계산을 할 때 논리적인 오류를 일으킬 수 있다. 예를 들면 평균을 계산할 때
  // null값이 존재하면 결과가 null로 나오기 때문에 의도에 맞게 NVL함수를 사용하여 처리해 주어야 한다.
  // 수수료가 없을 경우, 0으로 치환하여 수수료값이 0으로 나올 수 있도록 계산하였다.


DECODE(열이름, 조건값, 치환값, 기본값)   // 조건 논리 처리
IF-THEN-ELSE-END처럼 조건 논리를 가능하게 하는 함수, SQL구문에서 항상 쓰임
 치환값 : 조건에 해당 (true)
 기본값 : 조건에 해당하지 않을 경우 (false)
 산술 계산 외에 문자열 표현도 가능하고 다양한 형태로 응용하여 활용할 수 있다.
 DECODE(열이름, 조건, true, false조건, ture,false...)


SELECT first_name || ' ' || last_name AS 이름,
       department_id AS 부서,
       salary AS 현재급여,
       DECODE(department_id, 90, salary*1.1, salary) AS 인상급여,
       DECODE(department_id, 90, '10%인상','동결') AS 인상여부
FROM employees;




CASE 표현식 : 복잡한 조건 논리 처리 조건식을 여러 개 적용해야 할 때는
DECODE보다 CASE 표현식을 이용하는 것이 유용하다. DECODE함수는 데이터 값이 
정확히 맞거나 틀린 조건을 처리하기에 용이한 반면, CASE함수는 조건의 범위가 다양한 경우
쉽게 처리할 수 있다.

SELECT employee_id, first_name, last_name, salary,
    CASE
        WHEN salary >= 9000 THEN '상위급여'
        WHEN salary BETWEEN 6000 AND 8999 THEN '중위급여'
        ELSE '하위급여'
    END AS 급여등급
FROM employees;
// 데이터 값들의 범위를 잘 모르거나 특정 조건에 맞게 출력할 때는 CASE 표현식이 
// 유용하게 사용된다.
// CASE문은 매우 다양하게 활용할 수 있는데 위와 같이 숫자로 구간 등급을 나누어
// 표현할 수도 있고 나이, 지역, 날씨 등을 구분하여 출력할 때 응용하여 사용할 수 있다.


BETWEEN a AND B    두 값의 범위에 해당하는 행들을 검색 (a~b)
SELECT *
FROM employees
WHERE salary BETWEEN 10000 AND 20000;    salary가 10000~20000범위에 있는 데이터를 출력





RANK       동일한 값이 있을 때 공통 순위를 출력하고 그 갯수만큼 건너뛰어 다음 순위를 결정한다, 1,1,3,4,5 ...   
DENSE_RANK 동일한 값이 있을 때 공통 순위를 출력하고 건너뛰지 않고 바로 다음 순위를 출력한다. 1,1,2,2,3,4,5.....
ROW_NUMBER 공통 순위 없이 출력한다. 1,2,3,4 ....    
 // 3개 모두 순위를 정할 때 사용하는 함수이고 사용법이 조금씩 다르다.
 // 공통 순위가 있을 때 출력을 어떻게 할 것인지에 따라 달라진다.


SELECT employee_id,
       salary,
       RANK() OVER(ORDER BY salary DESC) AS RANK_급여
FROM employees;


SELECT employee_id,
       salary,
       DENSE_RANK() OVER(ORDER BY salary DESC) AS DENSE_RANK_급여
FROM employees;


SELECT employee_id,
       salary,
       ROW_NUMBER() OVER(ORDER BY salary DESC) AS ROW_NUMBER_급여
FROM employees;




# 그룹 함수(집계 함수)
 기준열에 대해 같은 데이터 값끼리 그룹으로 묶어, 묶은 행들의 집합에 대해 그룹 함수 연산을 GROUP BY절을 이용하여
 처리한다. 묶은 열들, 그룹에 대해 조건이 필요하면 HAVING절을 추가로 적용한다.

 SELECT 그룹함수(열이름)
 FROM 테이블명
 [WHERE 조건식]       <-- 옵션
 [ORDER BY 열이름]    <-- 옵션

그룹 함수
COUNT 행의 갯수 (COUNT함수는 null 값도 갯수를 센다. 나머지 아래의 함수들은 null을 제외하고 계산한다.))
SUM 합계
AVG 평균
MAX 최대값
MIN 최소값
STDDEV 표준편차
VARIANCE 분산


SELECT COUNT(*)   // 전체의 의미
FROM employees;

SELECT COUNT(salary)  // null값을 포함한 salary행의 갯수
FROM employees;


SELECT SUM(salary) AS 인건비,
       AVG(salary) AS 평균인건비,                         또는, ROUND(AVG(salary)) 
       SUM(salary)/COUNT(salary) AS 직접계산한평균인건비,  또는, ROUND(SUM(salary)/COUNT(salary))
       MAX(salary), MIN(salary)
FROM employees;


# GROUP BY 그룹으로 묶어 계산한다.
 SQL에서 같은 데이터 값을 갖는 행끼리 묶어 그룹화하여 연산한다.
 기준열을 지정하여 그룹화하는 명령어이다.

SELECT 기준열, 그룹함수(열이름)  4(5). 결과를 출력
FROM 테이블이름                 1. 라는 테이블에서
[WHERE 조건식]                  2. WHERE조건식에 맞는 데이터만을 추출해서
GROUP BY 열이름                 3. 같은 데이터끼리 그룹화하고
[ORDER BY 열이름];              5(4). 오름차순ASC/내림차순DESC으로 정렬

GROUP BY의 특징
 1) SELECT의 기준열과 그룹함수가 같이 지정되면 GROUP BY절의 기준열 이름이 반드시 기술되어야 한다.
 2) WHERE절을 사용하면 행을 그룹으로 묶기 전에 앞서 조건식이 적용된다.
 3) SELECT절에 그룹함수를 사용하지 않아도 GROUP BY절만으로도 할 수 있다.



employees테이블에서 employee_id가 10이상인 직원에 대해 
job_id별로 그룹화하여 job_id별로 총 급여, 평균 급여를 구하여 
총 급여 기준으로 내림차순 정렬하자.


SELECT COUNT(job_id) AS job_id갯수,
       job_id,
       SUM(salary) AS 총급여,
       AVG(salary) AS 평균급여
FROM employees
WHERE employee_id >= 10
GROUP BY job_id 
ORDER BY SUM(salary) DESC;



SELECT job_id,
       manager_id,
       SUM(salary) AS 총급여,
       ROUND(AVG(salary)) AS 평균급여
FROM employees
WHERE employee_id >= 10
GROUP BY job_id, manager_id    // 2개를 그룹화하였따.
ORDER BY SUM(salary) DESC;
 // GRUOP BY절에서 job_id, manager_id로 열이름을 순서대로 기술하여 대그룹화와 중그룹화하고
 // 그룹화된 집합에 대해 그룹함수를 적용해 결과를 출력하였다.
 // 즉, job_id별로 첫 번째 그룹화가 되었고, 여러 개의 중그룹을 갖게 되는 manager_id별로 
 // 총급여와 평균 급여가 계산된 것을 볼 수 있다.



HAVING  연산된 그룹 함수. 결과에 조건 적용하기
 HAVING절은 그룹화된 값에 조건식을 적용할 때 사용된다. 
 즉, WHERE절에서는 그룹함수를 쓸 수 없기 때문에 HAVING절을 사용해서 그룹함수의 결과값에 대해 조건식을 적용한다.
 일반적으로 GROUP BY절 다음에 기술하는 것이 논리적이고 가독성이 좋다.


SELECT 열이름, 그룹함수(열이름)         5(6).
FROM 테이블이름                        1.   실행순서는 이러하다.
[WHERE 조건식]         [] 는 생략가능   2.
GROUP BY 열이름                        3. 
[HAVING 조건식]                        4.
[ORDER BY 열이름];                     6(5).



SELECT job_id, 
       SUM(salary) AS 총급여,
       ROUND(AVG(salary)) AS 평균급여
FROM employees
WHERE employee_id >= 10
GROUP BY job_id
HAVING SUM(salary) > 30000
ORDER BY SUM(salary) DESC;
 // 그룹함수와 그룹화 절을 응용하면 데이터를 그룹화해서 데이터의 특성별로 분류하거나 계산할 수 있다.
 // 이를 통해 각종 리포트와 기술 통계가 가능해진다.


---------------------------------


여러 개의 테이블을 연결하기 (관계형 데이터베이스 Relational Database)
 
 join  관계형 데이터베이스의 테이블 안에 있는 행들을 논리에 따라 연결하도록 하는 기법이다.
       관계형 데이터베이스의 핵심 요소이기도 하다.
       테이블들이 관계를 맺고 조작되는 원리
       테이블들에는 각 유형에 맞는 데이터가 저장되어 있고 특정한 규칙에 따라 
       상하관계를 맺는다. 데이터가 테이블들에 흩어져 저장되어 있으므로 
       사용자가 원하는 형태로 데이터를 조작하려면 특별한 방법이 필요한데
       이 기법이 바로 join이다. join은 한 개 이상의 테이블과 테이블을 서로 연결하여 사용한다.
      
       이 조인에는 동등/외부/자체 조인 등을 많이 사용한다.
       (곱집합, 비동등 ...)
       
       동등조인 (조인 조건이 정확히 일치하는 경우)
       외부조인 (조인 조건이 정확하지 않아도)
       자체조인 (자체 테이블에서 조인)



@ 동등조인 (같은 데이터끼리 연결)
         가장 일반적이고 자주 쓰이는 조인이다. 조건값이 정확하게 일치하는 경우에만 가져오기 때문에
         inner join 또는 equi join 이라고 부른다.



SElECT *
FROM employees A, departments B                   // 각각의 테이블에서 
WHERE a.department_id = b.department_id;          //  중복되는 열인 department_id 를 
 // 키로 department_id를 기준으로 조인한 결과를 볼 수 있다. 같은 값끼리 연결이 되어 조회되었다.




employees, departments, locations 테이블을 조인하여 각 직원이 어느 부서에 속하는지
부서의 소재지가 어디인지 조회해 보세요.

SElECT B.department_name, C.city
FROM employees A, departments B, locations C   // A,B,C는 별칭
WHERE A.department_id = B.department_id 
AND B.location_id = C.location_id;             // 추가 조건식은 AND로 이어가자




@ 외부조인 (모든 데이터 연결)
         동등조인은 데이터 값이 정확히 일치하는 경우에만 결과를 출력한다. 
         만약 데이터 값이 정확히 일치하지 않을 경우 결과가 조회되지 않는다.
         외부조인(outer join)은 조건을 만족하지 않는 행도 모두 출력한다.
         
         1) 외부조인은 동등조인 조건을 만족하지 못해 누락되는 행을 출력하기 위해 사용한다.
         2) 외부조인은 (+)기호를 사용한다.
         3) (+)기호는 조인할 행이 없는 즉, 데이터 값이 부족한 테이블의 열이름 뒤에 기술한다.
         4) (+)기호는 한쪽에만 기술할 수 있다. 양쪽 모두에는 기술할 수 없다.
         5) (+)기호를 붙이면 데이터 값이 부족한 테이블에 null값을 갖는 행이 생성된다.

--

SELECT A.department_id AS A부서id,
       A.first_name || ' ' || A.last_name AS 이름,
       B.department_id AS B부서id,
       B.department_name AS 부서명
FROM employees A, departments B
WHERE A.department_id = B.department_id(+)   
ORDER BY A.department_id;
 // employees, departments 각각의 테이블 안에 department_id가 동일한 값을 
 // 시작인 employees테이블의 department_id를 기준으로 출력하고
 // A안에 B와 중복되지만 중복되지 않은 고유의 A는, WHERE조건절의 끝에 (+)기호를 통해 추가한다.
 // 추가한(B와 중복되지는 않지만 원래 employees테이블 안에 department_id 열에 있던) 값은 
 // null값을 갖는 행이 추가된다.


 SELECT A.department_id AS A부서id,
       A.first_name || ' ' || A.last_name AS 이름,
       B.department_id AS B부서id,
       B.department_name AS 부서명
FROM employees A, departments B
WHERE A.department_id(+) = B.department_id
ORDER BY A.department_id;
  // (+) 기호가 바뀔 경우, A에 B의 값을 추가하는데, A에는 없던 값이라 모두 null의 값을 갖는 행이 추가된다.

이처럼 외부조인은 일치하지 않는 데이터도 출력하고자 할 때 사용된다.
동등조인을 가장 많이 사용하지만 그 다음으로 많이 사용되는 것이 외부조인이다.



@ 자체조인 (자기 자신의 데이터와 연결)
            employees테이블의 manager_id는 곧 employee_id가 되는데
            해당 직원의 담당 매니저의 employee_id가 manager_id로 오게되는 것이다.
            담당 매니저가 누구인지 인적 정보를 조회하려면 결국 다시 employees테이블을 조인해야 한다.
            이렇게 자기 자신 테이블을 조인하는 것을 자체조인이라고 한다.
            
            1) 자기 자신 테이블을 이용하여 조인한다.
            2) 같은 테이블을 사용하기 때문에 각기 다른 별명을 사용하여 마치 서로 다른 두 개의 
               테이블을 동등조인하는 것처럼 보인다.
            3) 자체조인을 할 때 테이블은 동일한 열로 구성되어 있기 때문에 반드시 '별명.열이름'의 형태로
               명확하게 구별하여 조회하여야 한다.


SELECT A.employee_id, 
       A.first_name || ' ' || A.last_name AS A이름,
       A.manager_id,
       B.first_name || ' ' || B.last_name AS B이름
FROM employees A, employees B
WHERE A.manager_id = B.employee_id
ORDER BY A.employee_id;
  
  





집합으로 연결
지금까지는 FROM절에서 테이블들을 기술하고 WHERE절에 조건을 기술하여 테이블을 연결 및 조회하는 방식이다.
또 다른 연결방식으로 집합 연산자를 이용하는 방법이 있는데 SELECT문을 여러 개 연결하여 작성한다.

UNION (합집합)   중복되는 행은 한 번만 출력
UNION ALL        중복되는 행도 출력

INTERSECT (교집합) 중복되는 행만 출력

MINUS (차집합)   첫 번째에서 두 번째를 뺀다.



UNION
    SELECT문의 실행결과를 집합 하나로 만들 수 있다.
    즉, 각기 다른 두 개 이상의 SELECT문을 실행한 결과를 하나로 묶어서 출력할 수 있다는 의미이다.
    중복되는 행은 한 번만 출력된다.



employees 테이블의 department_id 집합과
departments 테이블의 department_id 집합을 UNION 연산자를 이용해 합쳐 보자.

SELECT department_id
FROM employees;  
                         // 각각 따로 돌려보자 employees에서는 27개, departments테이블에서는 107개가 출력됐다.
SELECT department_id
FROM departments; 


SELECT department_id    // 이렇게 UNION함수(합집합)를 사용하여 더해준다. (중복되는 행은 한 번만 출력)
FROM employees
UNION
SELECT department_id
FROM departments;


SELECT department_id
FROM employees
UNION ALL     // 모두 더한다 (중복값도 모두 출력된다.)
SELECT department_id
FROM departments
ORDER BY department_id;




INTERSECT    양쪽 SELECT문의 모두 존재하는 데이터만 출력한다. 즉, 교집합을 출력한다.

SELECT department_id
FROM employees
INTERSECT 
SELECT department_id
FROM departments
ORDER BY department_id;



MINUS     첫 번째 SELECT문의 집합에서 두 번째 SELECT문의 집합을 뺀 결과를 출력한다. 즉, 차집합을 출력한다.
          첫 번째 SELECT문의 집합에서 양쪽 테이블의 교집합을 뺸 결과와 동일하다.

SELECT department_id
FROM departments       // departments가 크기 때문에 앞으로 왔다. 
MINUS                  // 작은 employees가 먼저 오면 null이 나온다.
SELECT department_id
FROM employees 
ORDER BY department_id;
// department 테이블에만 존재하는 department_id값이라고 볼 수 있다.



서브쿼리 subquery : SELECT문 안의 SELECT문
 서브쿼리는 SELECT문 안에서 보조로 사용되는 또 다른 SELECT문이다. 복잡한 SELECT문을 작성할 때
 거의 필수로 사용되는 기법이다.
 서브쿼리의 결과를 메인쿼리가 받아서 처리하는 구조이기 때문에 중첩 nested 쿼리라고도 부른다.
 두 번 작성해서 결과를 출력할 SELCET문을 한 번으로 작성해서 처리할 수 있도록 한다.

 1) 서브쿼리는 괄호()로 묶어서 사용한다.
    메인쿼리는 묶을 필요가 없다.
 2) 메인과 서브를 연결하기 위해 단일행 연산자 또는 다중행 연산자를 사용한다.
 3) 메인쿼리는 연산자의 왼쪽에 기술하고 서브쿼리는 연산자의 오른쪽에 기술한다.
 4) 서브쿼리가 먼저 실행되고 그 다음 메인쿼리가 실행된다.

  
   단일행 서브쿼리
        서브쿼리 SELECT문에서 얻은 한 개 행의 결과값을 메인쿼리로 전달하는 서브쿼리
        단일행 연산자는 하나의 행을 처리하는 연산자이고 메인쿼리와 서브쿼리가 서로 같아야 한다.

SELECT *
FROM employees A
WHERE A.salary = (                    // 조건절 안에 작성한다.
                  SELECT salary                   
                  FROM employees
                  WHERE last_name = 'De Haan'   // 'De Haan' 인 사람의 salary와 같은 
                );                             
 // 서브쿼리의 결과, 'De Haan'의 salary는 17000을
 // 메인쿼리의 조건값으로 전달했고 메인쿼리는 그 값을 받아서 salary가 17000인 모든 직원을 출력했다.

SELECT *
FROM employees A
WHERE A.salary = 17000;    // 이 내용과 동일한 결과이다.





SELECT *
FROM employees
WHERE last_name = 'Taylor'; // 두 사람이 나온다.
                            // 전달 결과가 다중행일 때 단일행 연산자를 사용하면 오류가 발생한다.

SELECT *
FROM employees A
WHERE A.salary = (                    
                  SELECT salary                   
                  FROM employees
                  WHERE last_name = 'Taylor'    // 오류가 발생한다. 결과가 두 사람 즉, 다중행이기 때문이다.
                );   
 // last_name이 Taylor인 직원이 두 명 존재하고 salary도 각각 8600,3200으로 
 // 두 개의 결과행을 전달한다. 하지만 단일행 연산자를 사용하기 때문에 오류가 발생한다.
 // 그래서 다중행 서브쿼리가 필요하다.






   다중행 서브쿼리
            다중행 서브쿼리도 단일행과 동일하며 '다중행 연산자'를 사용한다.
            IN         여러 개의 같은 값
            NOT IN     여러 개의 같지 않은 값
            EXISTS     값이 있으면 참, 없으면 거짓 (존재하니? 응/아니)
            ANY        or, 최소한 하나라도 만족         ANY(10,20)  둘 중 하나만 있어도 ok
            ALL        and, 모두 포함해야 만족    ALL(10,20)     둘 다 있어야 ok  


SELECT *
FROM employees A
WHERE A.salary IN (
                    SELECT MIN(salary)        // 급여 최저값
                    FROM employees
                    GROUP BY department_id    // 부서별로
                    );
 // 다중행 서브쿼리이므로 등호(=)연산자를 사용하지 않고 '다중행 연산자'인 IN을 사용하였다.
 // 메인쿼리에서는 다중행의 salary값을 결과값이자 조건식으로 받아 일치하는 직원을 출력한다.


   다중열 서브쿼리
                메인쿼리와 서브쿼리를 비교하는 where조건식에서 
                비교되는 열이 여러 개일 때 사용하는 서브쿼리이다.


employees 테이블에서 job_id별로 가장 낮은 salary가 얼마인지 찾아보고
해당하는 직원이 누구인지 찾아보자.


SELECT first_name || ' ' || last_name AS 이름,
       job_id AS 직급,
       salary AS 급여
FROM employees A
WHERE (A.job_id, A.salary) IN (
                               SELECT job_id, MIN(salary)
                               FROM employees
                               GROUP BY job_id 
                            )
ORDER BY A.salary DESC;
 // 그룹함수 MIN을 사용하여 job_id별로 최저 salary를 찾아 그 값을 
 // 다중열 서브쿼리를 통해 메인쿼리에 전달하여 해당 직원이 누구인지 찾았다.




FROM절 서브쿼리
    FROM절에 테이블이름을 기술하여 해당 테이블의 데이터 값을 불러 왔다.
    FROM절에 서브쿼리를 사용하면 select문을 테이블처럼 사용할 수 있다.
    이를 통해 select문을 좀 더 간결하고 효율적으로 작성할 수 있다.


직원들 중에서 department_name 이 IT인 직원의 정보를 출력해보세요

SELECT *
FROM employees A,
                (SELECT department_id
                 FROM departments
                 WHERE department_name = 'IT') B
WHERE A.department_id = B.department_ID;




@@@

데이터 삽입/갱신/삭제
 CREATE
 READ
 UPDATE
 DROP(DELETE)      'CRUD'라고 한다.

데이터를 직접 조작하는 방법
SELECT문이 주로 데이터 출력을 위해 사용 되었다면 
DML(Data Manipulation Language 데이터 조작어)은 데이터를 직접 조작하는데 사용된다.
SELECT의 데이터를 보여주는 기능을 넘어 직접 데이터를 삽입/갱신/삭제하게 된다.
SELECT은 단지 조회하여 출력할 뿐이다
INSERT, UPDATE, DELETE은 직접 데이터를 수정하게 된다. 데이터를 조작하여 저장하는 일련의 과정을
트랜젝션(Transaction)이라고 한다. DML은 트랜잭션을 다루는 명령어들이라고 할 수 있다.

INSERT 테이블에 새로운 행을 삽입  
UPDATE 테이블에 이미 있는 내용을 갱신
DELETE 테이블의 행을 삭제





행을 추가해보자 우선
SELECT *
FROM departments; 조회 후 마지막 행을 확인하고,

INSERT INTO departments
(department_id, department_name, manager_id, location_id)
VALUES (272,'sample_dept',200,1700);

SELECT *
FROM departments; 다시 조회하여 추가된 것을 확인한다.


// 이렇게 간략하게 삽입할 수도 있다.
INSERT INTO departments
VALUES (272,'sample_dept',300,3000);


// 열이름과 입력되는 데이터 값이 일치하는지 확인하기 위해 열이름을 모두 기술할 것을 권장
// INSERT 명령어를 실행한다고 데이터베이스에 영구적으로 저장되는 것은 아니다.
// 실행한 DML명령어를 최종적으로 반영하려면 COMMIT을 해야한다.
// 커밋하기 전까지는 시행한 모든 DML은 데이터베이스에 반영되지 않는다.

구문입력칸에 commit; 이라고 입력하면 된다.
커밋을 하지 않은 채로 데이터베이스 시스템이 비정상적으로 셧다운 되면 커밋전의 반영된 데이터는
저장되지 않는다.

DML명령어를 사용할 때는 테이블의 속성과 제약조건에 주의를 기울여야 한다.



UPDATE 
    기존의 데이터를 다른 데이터 값으로 변경할 때 사용된다. UPDATE절에 WHERE조건절을 사용할 수 있다.

departments테이블에 department_name이 'Sample_Dept'인 행을 찾아서
manager_id값을 500으로, location_id를 2000으로 변경하시오.


UPDATE departments
SET 열이름1 = 데이터값 1,
    열이름2 = 데이터값 2
WHERE 조건식

UPDATE departments
SET manager_id = 500,
    location_id = 2000
WHERE department_name = 'Sample_Dept';


departments테이블에서 department_id가 40인, manager_id와 location_id를 
원하는 값으로 바꿔보자.

UPDATE departments
SET manager_id = 1
    location_id = 500
WHERE department_id = 300;


UPDATE departments
SET department_id = null
WHERE department_name = 'sample_dept';




DELETE 데이터 삭제

DELETE FROM departments
WHERE department_name = 'sample_dept';


DML명령어들은 직접 데이터를 조작하기 때문에 사용 시 신중해야한다.
DML은 실행한 후 커밋을 해야 데이터베이스에 적용되며 'F12'키 또는 상단에 롤백 버튼으로 되돌릴 수 있다.




데이터의 무결성
    데이터베이스에 저장된 데이터값과 사용자가 의도한 데이터값은 일치해야 한다.
    예를 들면 주민등록번호와 같은 값은 중복된 값이 있을 수 없다.
    중복된 주민등록번호 값이 입력되거나 null값이 입력된다면 데이터 식별에 큰 문제가 발생할 수 있다.
    또한 salary열의 데이터 값에 숫자가 아닌 '오천만원'문자가 입력된다면 큰 문제의 소지가 있다.
    데이터베이스 관리의 기본 규칙이 지켜지지 않으면 큰 혼란이 올 수 있다.
    규칙에 위배되지 않아야 한다. 이거을 위해 데이터베이스 시스템은 데이터에 접근하거나 처리할 때마다
    부적절한 데이터가 입력되는지 검사하여 데이터의 무결성을 유지하게 된다.
    DATA INTEGRITY

개체 무결성 - 고유해야 하며 null값을 가질 수 없다. (예, 주민번호)
참조 무결성 - 참조되는 외래키가 존재하면 행은 삭제될 수 없고 기본키도 변경될 수 없다.
영역 무결성 - 데이터의 형태, 범위, 유일성에 관한 제한 


제약 조건(Constraint) : 정해 놓은 규칙에 맞는 데이터만 입력받고 규칙에 어긋나는 데이터는 거부하여
                        데이터의 무결성을 지키는 방법



INSERT INTO departments
VALUES('100','Sample_Dept',220,3000);
// 구문 실행 후 이러한 오류가 발생하였다.

오류 보고 -
ORA-00001: unique constraint (HR.DEPT_ID_PK) violated

// 첫 열에는 고유한, unique한 값만 입력되도록 제약 조건이 설정되어 있어서
// 이미 존재하는 100을 삽입하려고 시도하여 오류가 발생됐다.




INSERT INTO departments
VALUES('','Sample_Dept',220,3000);

오류 보고 -
ORA-01400: cannot insert NULL into ("HR"."DEPARTMENTS"."DEPARTMENT_ID")
// null값을 넣어도 에러가 발생한다.



INSERT명령어 뿐만 아니라 UPDATE이나 DELETE 명령어를 사용할 때도 제약 조건의 준수 여부가 중요하다.
무결성과 제약조건은 데이터를 정상으로 유지하기 위한 장치로 DML명령어를 사용하기 전에 확인할 필요가 있다.




트랜잭션 Transaction
    데이터를 조작하여 저장하는 일련의 과정, 삽입,갱신,삭제와 관련된 논리적인 작업을 말한다.(DML)
    데이터 무결성이 보장되는 상태에서 DML작업을 완수하기 위한 기본작업 단위이다.
    DML은 트랜잭션을 다루는 명령어들이라고 할 수 있다.

 은행A계좌의 잔액 100만원
 A  >>  B (이체 10만원)
 A계좌 10만원 인출 / B계좌 10만원 입금    
  그런데 갑자기 정전이 일어나서, A계좌에서 인출만 되고 B계좌로는 입금되지 않았다고 한다면,
  이러한 이슈에 대한 대응 논리가 트랜잭션이다.
  위와 같이 트랜잭션의 처리가 완전히 끝나지 않았을 경우, 전혀 이루어지지 않은 것과 같아야 한다.
  (All or Nothing)
  트랜잭션이 성공하면 트랜잭션의 결과를 영구적으로 보장해야 한다.

  트랜잭션의 수행 단계
    실행  >>  부분완료  >>  완료
  
    커밋 commit, 트랜잭션의 모든 미결정 데이터(부분완료)를 영구적으로 반영함으로 트랜잭션을 종료한다.(완료)
    롤백 rollback, 트랜잭션의 모든 미결정 데이터 변경을 포기함으로 트랜잭션을 종료한다.(되돌리기)



DDL Data Difinition Language  
    따로 커밋하지 않아도 즉각 자동으로 반영된다.
  
  CREATE  테이블 생성

CREATE TABLE sample_product
    (product_id number, 
     product_name varchar(30),
     menu_date date);
실행하여 생성 후, 테이블 우클릭하여 새로고침하면 생성한 테이블을 확인할 수 있다.


INSERT INTO sample_product
VALUES(1,'tv',to_date('140101','YYMMDD'));

INSERT INTO sample_product
VALUES(2,'washer',to_date('150101','YYMMDD'));

INSERT INTO sample_product
VALUES(3,'cleaner',to_date('160101','YYMMDD'));
commit;

데이터 내에서 새로고침(Ctrl+R)을 해야 반영되어 보인다.



ALTER 테이블 수정
    이미 생성된 테이블에 열을 추가/삭제/변경하거나 테이블의 구조를 바꿀 수 있다.























주석 설정하기: ctrl + /
원하는 문을 블록 처리한 후 'ctrl + /' 클릭












