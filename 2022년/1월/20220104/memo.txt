
## 함수
입력(input)   ->   함수   ->   출력(output)
   (딸기)        (믹서기)      (음 딸기쥬스)     
 1) 데이터 값을 계산하거나 조작한다.
 2) 행의 그룹에 대해 계산하거나 요약한다.

 함수에는 단일행/그룹 함수가 있다.
     단일행 함수 : 한 번에 하나만 처리(a1값을 처리하고, a2값을 처리하고)

     그룹 함수 : 동시에 대상 열 전체를 처리
                b1,b2,b3,b4를 동시에 입력 받아서 평균 또는 합계 등을 출력한다.
                그룹 함수는 GROUP BY절과 함께 사용된다.
 
 단일행 함수에 많이 사용되는 데이터 타입
     CHAR(n)     문자(고정길이)
     VARCHAR(n)  문자(가변길이)
     NUMBER()    숫자 타입
     DATE()      날짜 타입

 단일행 함수들은 테이블에 존재하는 많은 행들이 한 번에 하나씩만 입력되어 하나씩 처리되는 함수이다.
 1) 각 행에 대해 수행한다.
 2) 각 데이터 타입에 맞는 함수를 사용해야 한다.
 3) 행 별로 하나의 결과를 반환한다.
 4) 중첩해서 사용할 경우 가장 안쪽 단계에서 바깥쪽 단계로 진행된다.
    함수1(함수2(함수3))    함수3 >> 함수2 >> 함수1


# 문자 타입함수 (SQL은 인덱스 값을 1부터 시작한다.)
 문자 타입의 함수는 주로 데이터 조작에 쓰이고
 작은 따옴표를 사용하여 문자나 문자열 데이터를 표현한다.

 lower()    값을 소문자로 변환한다.         lower('ABCD')  >> abcd
 upper()    값을 대문자로 변환한다.         upper('abcd')  >> ABCD
 initcap()  첫 글자만 대문자로 변환한다.   initcap('abcd')  >> Abcd

 substr()   문자열들 중에 일부분만 선택한다. ('열이름',시작위치,원하는길이)
        substr('ABC',1,2)      >> AB  

 replace()   문자열을 바꾼다. ('열이름','바꾸고싶은원래값','바꿀값')
        replace('AB','A','C')   >> CB

 concat()    두 문자열을 연결한다.('','값')  * ||와 같다.
        concat('A','B')    >> AB

 length()   문자열 길이(갯수)를 구한다.('문자열')
        length('AB')   >> 2
 
 instr()    문자의 위치를 구한다. ('값','찾을값')
        instr('ABCD','D')  >> 4 

 lpad(), rpad()   왼쪽(오른쪽)부터 특정 문자로 자리를 채운다.('값 또는 열이름',전체크기(숫자),'넣고싶은값')
        lpad('ABCD',6,'*')    >> **ABCD
        lpad('78',3,'0')      >> 078
        rpad('ABCD',6,'*')    >> ABCD**

 ltrim(), rtrim()  문자열의 왼쪽(오른쪽)문자를 지운다. ('값 또는 열이름','지울값')
        ltrim('ABCD','AB')    >> CD
        ltrim('  ABCD',' ')   >> ABCD  여백을 지우기 위한 용도이기도 하다.
        rtrim('ABCD','CD')    >> AB

이제 적용해보자.

SELECT last_name,                      // last_name이라는 열 선택
       LOWER(last_name) AS lower적용,  // last_name이라는 열을 LOWER함수에 넣었다.
       UPPER(last_name) AS upper적용,  // last_name이라는 열을 UPPER함수에 넣었다.
       email,                          // email이라는 열 선택
       INITCAP(email) AS initcap적용   // email이라는 열을 initcap함수에 넣었다.
FROM employees;



SELECT job_id,                                              // job_id라는 열을 선택
       SUBSTR(job_id, 1, 2) AS substr적용,                  // job_id라는 열을 substr함수에 넣었다.('값 또는 열이름',시작위치,원하는길이)
       REPLACE(job_id,'ACCOUNT', 'ACCNT') AS replace적용,   // job_id라는 열을 replace함수에 넣었다.('값 또는 열이름','바꾸고싶은값','바꿀값')
       first_name,                                // first_name이라는 열을 선택
       RPAD(first_name,12,'*') AS rpad적용,       // first_name이라는 열을 RPAD함수에 넣었다.('값 또는 열이름',전체길이,'넣고싶은값')
       LTRIM(job_id,'S') AS ltrim적용            // job_id라는 열을 ltrim함수에 넣었다.('값 또는 열이름','지울값')
FROM employees;


TRIM() 공백을 모두 제거 (문자열 중간의 여백은 제거 불가)

Dual 테이블    dummy라는 하나의 열과 x데이터 값을 가지는 테이블이다.
              테이블을 문법적으로 지정해야 할 때 사용하는 테이블이다.
SELECT * FROM dual;


# 숫자 타입함수
 숫자 타입 함수들은 주로 숫자를 계산하거나 계산이 끝난 뒤 추가로 가공처리를 할 때 사용한다.
 (계산 후 평균/합계를 구하거나 등...)

 round()  반올림 (숫자값 또는 열이름,소숫점뒤자리의수)
    round(15.351,0)  >> 15
    round(15.751,0)  >> 16

 trunc()  절삭  (숫자값 또는 열이름,남길소숫점뒤자리의수)  * 기본 문법은 round와 동일하다.
    trunc(15.351,1)  >> 15.3

 mod() 나눈 몫을 뺀 '나머지' (숫자값 또는 열이름,나눌값))   * 이를 통해 홀/짝/배수를 찾아낼 수 있다.
    mod(15,2)   >> 1  (몫은 7이고, 나머지는 1)

 sign()  (양수1), (0), (음수-1) 을 구분한다. (확인할 값 또는 열이름)
    sign(15)  >> 1
    sign(0)   >> 0
    sign(-5)  >> -1

이제 활용해보자.

SELECT salary,
       salary/30 AS 일급,
       ROUND(salary/30,0) AS  zero적용일급,       // salary라는 열을 round함수에 담고, 30을 나눈 후 반올림(내림)하여 나머지 소숫점을 제거
       ROUND(salary/30,1) AS  one적용일급,        // 위와 동일하며 소숫점 첫번째 자리까지 출력한다.
       ROUND(salary/30,-1) AS  minusone적용일급,  // -1은 1자리를 아예 반올림(내림)하여 1의 자리는 모두 0으로 출력된다.

       TRUNC(salary/30,0) AS zero적용일급trunc,  // salary라는 열을 trunc함수에 담고 30으로 나눈 후 소숫점을 모두 제거 
       TRUNC(salary/30,1) AS one적용일급trunc,   // 위와 동일하며 소숫점 첫번째 자리를 남기고 나머지 소숫점은 제거
       TRUNC(salary/30,-1) AS minusone적용일급trunc // -1은 1자리를 아예 제거하여 1의 자리는 모두 0으로 출력된다.
FROM employees; 
       



# 변환 함수
 각 열에 대해 데이터 타입을 규정하고 있다.
 SQL문을 실행하기 위해 데이터 값의 타입을 변환해야 하는 경우가 있다.
 DBMS에 의해 자동으로(암묵적) 또는 사용자에 의해 (명시적) 실행될 수 있다.


 자동 형변환
     VARCHAR or CHAR >> NUMBER
     VARCHAR or CHAR >> DATE
     
SELECT 1 + '2' FROM dual;
     '2'는 작은 따옴표로 묶여 있어 숫자가 아닌 문자이지만 결과는 3으로 계산되어 출력되었다.
     DBMS이 계산을 위해 문자 '2'를 자동으로 숫자 2로 변환하여 계산하였다.
     이것을 DBMS에 의해 자동 데이터 타입 변환이라고 한다. 이렇게 자동 데이터 타입 변환을 이용할 수 있더라도
     SQL문의 성능과 안정성을 위해 수동으로 데이터 타입을 변환해주는 것이 좋다.


 수동 형변환
     TO_CHAR     숫자/문자/날짜를 VARCHAR로 변환    
     TO_NUMBER   숫자처럼 보이는 문자열을 실제 숫자 데이터 타입을 변환하는 함수
     TO_DATE     형태만 날짜인 문자열을 실제 날짜로 변환


SELECT TO_NUMBER('123')
FROM dual;


SELECT TO_CHAR(SYSDATE, 'YY')     // SYSDATE은 시스템에 있는 현재 시간을 말한다.
FROM dual;


SELECT TO_CHAR(SYSDATE, 'YY') AS 두자리년도,        외워두자.
       TO_CHAR(SYSDATE, 'YYYY') AS 네자리년도,
       TO_CHAR(SYSDATE, 'MM') AS 월,
       TO_CHAR(SYSDATE, 'MON') AS 월이붙은월,
       TO_CHAR(SYSDATE, 'YYYYMMDD') AS 년월일
FROM dual;



SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD  PM HH:MI:SS') AS 현재날짜와시간,
       TO_CHAR(SYSDATE, '"날짜:"YYYY/MM/DD') AS 정리된현재날짜와시간,
       TO_CHAR(SYSDATE, '"날짜:"YYYY/MM/DD"   시간:"PM HH:MI:SS') AS 정리된현재날짜와시간
FROM dual;
 // 글자와 콜론은 "" 로 묶어주고, 전체적인 년월일시간은 ''로 묶어주면 된다.




자주쓰이는 함수들을 살펴보자.
 NOT NULL   특정 열의 행에 대한 데이터 값이 없다면 데이터 값은 NULL이 된다.
            테이블을 만들 때 NULL값을 가지지 않도록 설정할 수도 있다.
 null의 특징
 1) 함수 적용이 불가능한 값이다.
 2) 0도 아니고, 공백 ' '도 아니다
 3) null값을 포함하여 계산한 결과는 null이다.

SELECT salary, commission_pct
FROM employees
ORDER BY commission_pct;     // commission_pct는 수수료이다.
  // commission_pct에 대해 오름차순으로 정렬하여 출력한다.



SELECT employee_id,
       first_name,
       last_name,
       job_id,
       salary,
       commission_pct,
       salary * commission_pct       // 35행까지 잘 나오다가 commission_pct값이 null인 36행부터는 
FROM employees                       // salary * commission_pct 값이 모두 null로 출력되고 있다.
ORDER BY commission_pct;











